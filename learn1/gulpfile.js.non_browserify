var gulp = require('gulp');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var react = require('gulp-react');
var htmlreplace = require('gulp-html-replace');

var path = {
  HTML: 'src/index.html',
  ALL: ['src/js/*.js', 'src/js/**/*.js', 'src/index.html'],
  JS: ['src/js/*.js', 'src/js/**/*.js'],
  MINIFIED_OUT: 'build.min.js',
  DEST_SRC: 'dist/src',
  DEST_BUILD: 'dist/build',
  DEST: 'dist'
};

// Transform the jsx files to js, and put it in the destination folder
gulp.task('transform', function(){
  gulp.src(path.JS)
    .pipe(react())
    .pipe(gulp.dest(path.DEST_SRC));
});

// Copy the html files to the destination folder
gulp.task('copy', function(){
  gulp.src(path.HTML)
    .pipe(gulp.dest(path.DEST));
});

// Watch all of our files, whenever any of them change, run the transform task and the copy task
gulp.task('watch', function(){
  gulp.watch(path.ALL, ['transform', 'copy']);
});

// This task is going to grab all of our JS files, concatenate all of them together,
// minify them, then output the result to our dist/build folder
gulp.task('build', function(){
  gulp.src(path.JS)
    .pipe(react())
    .pipe(concat(path.MINIFIED_OUT))
    // .pipe(uglify(path.MINIFIED_OUT))
    .pipe(gulp.dest(path.DEST_BUILD));
});

// Update the index.html to replace the source js files with the minified version
// This task relies on the special comment "build:js" in index.html
// That ‘js’ key in htmlreplace coincides with build:js in index.html.
gulp.task('replaceHTML', function(){
  gulp.src(path.HTML)
    .pipe(htmlreplace({
      'js': 'build/' + path.MINIFIED_OUT
    }))
    .pipe(gulp.dest(path.DEST));
});

// Default task for development. To run the watch task.
gulp.task('default', ['watch']);

// Run this gulp task to create the production version.
gulp.task('production', ['replaceHTML', 'build']);
